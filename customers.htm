<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Qu·∫£n L√Ω Kh√°ch H√†ng</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f5f5; }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px; margin-bottom: 20px; border-radius: 8px; }
        .header h1 { font-size: 24px; }
        .nav { display: flex; gap: 10px; margin-top: 10px; }
        .nav a { color: white; text-decoration: none; padding: 8px 16px; background: #34495e; border-radius: 4px; }
        .nav a:hover { background: #1abc9c; }
        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .form-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; }
        .form-group { display: flex; flex-direction: column; }
        .form-group label { margin-bottom: 5px; font-weight: 600; color: #2c3e50; }
        .form-group input, .form-group select { padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
        .full-width { grid-column: 1 / -1; }
        .btn { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; font-weight: 600; }
        .btn-primary { background: #3498db; color: white; }
        .btn-success { background: #2ecc71; color: white; }
        .btn-danger { background: #e74c3c; color: white; }
        .btn-warning { background: #f39c12; color: white; }
        .btn:hover { opacity: 0.9; }
        .btn-group { display: flex; gap: 10px; margin-top: 15px; }
        table { width: 100%; border-collapse: collapse; }
        table th, table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        table th { background: #34495e; color: white; font-weight: 600; }
        table tr:hover { background: #f8f9fa; }
        .actions { display: flex; gap: 5px; }
        .actions button { padding: 6px 12px; font-size: 12px; }
        .alert { padding: 12px; border-radius: 4px; margin-bottom: 15px; }
        .alert-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .alert-error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõçÔ∏è H·ªá Th·ªëng Qu·∫£n L√Ω B√°n H√†ng</h1>
            <div class="nav">
                <a href="products.html">S·∫£n Ph·∫©m</a>
                <a href="customers.html">Kh√°ch H√†ng</a>
                <a href="orders.html">ƒê∆°n H√†ng</a>
            </div>
        </div>

        <div class="card">
            <h2>üë• Qu·∫£n L√Ω Kh√°ch H√†ng</h2>
            <div id="alertBox"></div>
            
            <form id="customerForm">
                <input type="hidden" id="customerNumber">
                <div class="form-grid">
                    <div class="form-group">
                        <label>T√™n C√¥ng Ty/Kh√°ch H√†ng *</label>
                        <input type="text" id="customerName" required>
                    </div>
                    <div class="form-group">
                        <label>H·ªç Li√™n H·ªá *</label>
                        <input type="text" id="contactLastName" required>
                    </div>
                    <div class="form-group">
                        <label>T√™n Li√™n H·ªá *</label>
                        <input type="text" id="contactFirstName" required>
                    </div>
                    <div class="form-group">
                        <label>S·ªë ƒêi·ªán Tho·∫°i *</label>
                        <input type="tel" id="phone" required>
                    </div>
                    <div class="form-group">
                        <label>ƒê·ªãa Ch·ªâ 1 *</label>
                        <input type="text" id="addressLine1" required>
                    </div>
                    <div class="form-group">
                        <label>ƒê·ªãa Ch·ªâ 2</label>
                        <input type="text" id="addressLine2">
                    </div>
                    <div class="form-group">
                        <label>Th√†nh Ph·ªë *</label>
                        <input type="text" id="city" required>
                    </div>
                    <div class="form-group">
                        <label>T·ªânh/Th√†nh</label>
                        <input type="text" id="state">
                    </div>
                    <div class="form-group">
                        <label>M√£ B∆∞u ƒêi·ªán</label>
                        <input type="text" id="postalCode">
                    </div>
                    <div class="form-group">
                        <label>Qu·ªëc Gia *</label>
                        <input type="text" id="country" value="Vi·ªát Nam" required>
                    </div>
                    <div class="form-group">
                        <label>Nh√¢n Vi√™n Ph·ª• Tr√°ch</label>
                        <input type="number" id="salesRepEmployeeNumber">
                    </div>
                    <div class="form-group">
                        <label>H·∫°n M·ª©c T√≠n D·ª•ng (VNƒê)</label>
                        <input type="number" id="creditLimit" min="0">
                    </div>
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-success">üíæ L∆∞u</button>
                    <button type="button" class="btn btn-warning" onclick="resetForm()">üîÑ Reset</button>
                </div>
            </form>
        </div>

        <div class="card">
            <h3>üìã Danh S√°ch Kh√°ch H√†ng</h3>
            <table id="customersTable">
                <thead>
                    <tr>
                        <th>M√£ KH</th>
                        <th>T√™n Kh√°ch H√†ng</th>
                        <th>Ng∆∞·ªùi Li√™n H·ªá</th>
                        <th>ƒêi·ªán Tho·∫°i</th>
                        <th>Th√†nh Ph·ªë</th>
                        <th>H·∫°n M·ª©c</th>
                        <th>Thao T√°c</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script>
        const API_URL = 'http://localhost:3000/api';
        let isEditMode = false;

        async function loadCustomers() {
            const res = await fetch(`${API_URL}/customers`);
            const customers = await res.json();
            const tbody = document.querySelector('#customersTable tbody');
            tbody.innerHTML = '';
            customers.forEach(customer => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${customer.customerNumber}</td>
                    <td>${customer.customerName}</td>
                    <td>${customer.contactFirstName} ${customer.contactLastName}</td>
                    <td>${customer.phone}</td>
                    <td>${customer.city}</td>
                    <td>${customer.creditLimit ? new Intl.NumberFormat('vi-VN').format(customer.creditLimit) + ' ƒë' : 'N/A'}</td>
                    <td class="actions">
                        <button class="btn btn-primary" onclick="editCustomer(${customer.customerNumber})">‚úèÔ∏è S·ª≠a</button>
                        <button class="btn btn-danger" onclick="deleteCustomer(${customer.customerNumber})">üóëÔ∏è X√≥a</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        document.getElementById('customerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const data = {
                customerName: document.getElementById('customerName').value,
                contactLastName: document.getElementById('contactLastName').value,
                contactFirstName: document.getElementById('contactFirstName').value,
                phone: document.getElementById('phone').value,
                addressLine1: document.getElementById('addressLine1').value,
                addressLine2: document.getElementById('addressLine2').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                postalCode: document.getElementById('postalCode').value,
                country: document.getElementById('country').value,
                salesRepEmployeeNumber: document.getElementById('salesRepEmployeeNumber').value || null,
                creditLimit: document.getElementById('creditLimit').value || null
            };

            try {
                let res;
                if (isEditMode) {
                    const id = document.getElementById('customerNumber').value;
                    res = await fetch(`${API_URL}/customers/${id}`, {
                        method: 'PUT',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    });
                } else {
                    res = await fetch(`${API_URL}/customers`, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    });
                }
                const result = await res.json();
                showAlert(result.message, 'success');
                resetForm();
                loadCustomers();
            } catch (error) {
                showAlert('C√≥ l·ªói x·∫£y ra: ' + error.message, 'error');
            }
        });

        async function editCustomer(id) {
            const res = await fetch(`${API_URL}/customers/${id}`);
            const customer = await res.json();
            document.getElementById('customerNumber').value = customer.customerNumber;
            document.getElementById('customerName').value = customer.customerName;
            document.getElementById('contactLastName').value = customer.contactLastName;
            document.getElementById('contactFirstName').value = customer.contactFirstName;
            document.getElementById('phone').value = customer.phone;
            document.getElementById('addressLine1').value = customer.addressLine1;
            document.getElementById('addressLine2').value = customer.addressLine2 || '';
            document.getElementById('city').value = customer.city;
            document.getElementById('state').value = customer.state || '';
            document.getElementById('postalCode').value = customer.postalCode || '';
            document.getElementById('country').value = customer.country;
            document.getElementById('salesRepEmployeeNumber').value = customer.salesRepEmployeeNumber || '';
            document.getElementById('creditLimit').value = customer.creditLimit || '';
            isEditMode = true;
            window.scrollTo(0, 0);
        }

        async function deleteCustomer(id) {
            if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng n√†y?')) return;
            try {
                const res = await fetch(`${API_URL}/customers/${id}`, { method: 'DELETE' });
                const result = await res.json();
                showAlert(result.message, 'success');
                loadCustomers();
            } catch (error) {
                showAlert('Kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng: ' + error.message, 'error');
            }
        }

        function resetForm() {
            document.getElementById('customerForm').reset();
            document.getElementById('customerNumber').value = '';
            document.getElementById('country').value = 'Vi·ªát Nam';
            isEditMode = false;
        }

        function showAlert(message, type) {
            const alertBox = document.getElementById('alertBox');
            alertBox.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
            setTimeout(() => alertBox.innerHTML = '', 3000);
        }

        loadCustomers();
    </script>
</body>
</html>